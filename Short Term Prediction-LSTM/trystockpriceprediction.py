# -*- coding: utf-8 -*-
"""TRYStockPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1alK_ga5Pm4ov_r8_c5sBmqyIFfFCvmid
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt

plt.style.use('fivethirtyeight')

#Get the stock quote
df = web.DataReader('AAPL',data_source ='yahoo',start = '2018-01-01',end = '2019-01-01')
df.head
df.shape

#Visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD' ,fontsize=18)
plt.show()
df

#Create a new data frame with only the Close column
data = df.filter(['Close'])
#Convert the dataframe to a numpy array
dataset = data.values
#Get the number of rows to train the model on
training_data_len = math.ceil(len(dataset)*.8)
training_data_len

#Scale the data
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#Create the training data set
#Create the scaled training data set 
train_data = scaled_data[0:training_data_len,:]
#Split the data into x_train and y_train data sets
x_train =[]
y_train =[]

for i in range (60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train to numpy arrays
x_train , y_train = np.array(x_train),np.array(y_train)
#Reshape
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model= Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25)) #25 Neuron
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam',loss='mean_squared_error')

#Train the model
model.fit(x_train,y_train,batch_size=1,epochs=1)

#Create the testing data set
#Create a new array containing scaled values from index 1348 to 1808
test_data = scaled_data[training_data_len-60:,:]
#Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])
x_test

#Convert the data to a numpy array -LSTM Models want 3D shape
x_test = np.array(x_test)
x_test = np.reshape(x_test,(x_test.shape[0] , x_test.shape[1] , 1 ))

#Get the models predicted price values (x_test)
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions) # Unscale the values

#Get the RMSE
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions']=predictions
#Visualize
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=16)
plt.ylabel('Close Price USD',fontsize=16)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')
plt.show()