# -*- coding: utf-8 -*-
"""TRYLinearRegressionPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cooD3l7XNEwaz-zOWbemUeUD9uvIUMoZ
"""

import pandas as pd
import numpy as np
import math
import pandas_datareader as web
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler

#Get the stock quote
df = web.DataReader('AAPL',data_source ='yahoo',start = '2018-01-01')
print(df)

data = pd.DataFrame(df, columns=['Close'])
print(data.head())

y = data['Close']
data_len_org = len(y)
x=[]
for i in range(0,data_len_org):
  x.append(i)

print(len(x))
xtmp =np.array(x).reshape(-1,1)
ytmp =np.array(y).reshape(-1,1)

xtmp=pd.DataFrame(xtmp)
ytmp=pd.DataFrame(ytmp)

#Original Data
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(xtmp,ytmp)
plt.xlabel("Date",fontsize = 18)
plt.ylabel("Close Price USD", fontsize=18)
plt.show()

#Predict the next days

training_data_len = math.ceil(len(y)*.8)
print(training_data_len)

X_train =xtmp[0:training_data_len-60]
Y_train =ytmp[0:training_data_len-60]

X_test =xtmp[training_data_len-60:training_data_len]
Y_test =ytmp[training_data_len-60:training_data_len]
X_train.shape

#Building Model
model = LinearRegression()
model.fit(X_train, Y_train)

predictions = model.predict(X_test)

#Plot the predicted data
plt.figure(figsize = (16,8))
plt.title('Linear Regression | Price vs Time ')
plt.plot(X_train,Y_train)
plt.plot(X_test,predictions,Y_test, label='Predicted Price')
plt.legend(['Train','Test Prediction','Val'],loc='lower right')
plt.xlabel('Integer Date')
plt.ylabel('Close Price')
plt.show()

# Split the data to test , train
data_len = len(x)
data_len_fiftydays = data_len
sample_times = 50          #The Day how often the data will be predicted 
data_len = data_len/sample_times
data_len = int(data_len)
print(data_len,"asd")
#Adding extra 50 days for predicting last 50 days
dayarray=[]
for i in range(0,data_len):
  dayarray.append(i*sample_times)
  print(dayarray)

lastfiftydays=[]
for i in range(0,data_len_org+sample_times):
  lastfiftydays.append(i)
print(len(lastfiftydays))
lastfiftydays = pd.DataFrame(lastfiftydays)

count =1

#Predict for every 50 days.
lnmodel = LinearRegression()
plt.figure(figsize=(16,8))
plt.plot(xtmp,ytmp)
for i in dayarray:
  lnmodel.fit(xtmp[i:i+sample_times],ytmp[i:i+sample_times])
  lnprediction = lnmodel.predict(lastfiftydays[i+sample_times:i+sample_times+sample_times])
  plt.plot(lastfiftydays[i+sample_times:i+sample_times+sample_times],lnprediction)
  
  R2 = lnmodel.score(xtmp[i:i+sample_times],ytmp[i:i+sample_times])
  Slope =lnmodel.coef_
  print("R2 for ", count,". Prediction:",R2,"Slope :" , Slope)
  count=count+1

plt.legend(['Data','Predictions'],loc='lower right')

#Get the slopes
slopemodel = LinearRegression()
slopearray = []
for i in dayarray:
  slopemodel.fit(xtmp[i:i+sample_times],ytmp[i:i+sample_times])
  lnprediction = slopemodel.predict(lastfiftydays[i+sample_times:i+sample_times+sample_times])
  new_slope = np.asscalar(slopemodel.coef_)
  slopearray.append(new_slope)
slopearray = pd.DataFrame(slopearray)
slopearray

#Plot the slopes
plt.figure(figsize=(16,8))
plt.title("Slope of Predictions")
plt.plot(dayarray,slopearray)
plt.show()

buy = []
sell= []
lenbuy = []
lensell =[]
thresh = 0.2
count =0
slopearray=np.array(slopearray)
#xtmp = np.array(xtmp)
for i in dayarray:
  if slopearray[count]>0:
    sell.append(dayarray[count])
    lensell.append(i)
  elif slopearray[count]<0:
    buy.append(dayarray[count])
    lenbuy.append(i)
  count = count+1

plt.figure(figsize=(24,16))
plt.plot(xtmp,ytmp,marker='o',markevery=lenbuy, markerfacecolor='green')
plt.plot(xtmp,ytmp,marker ='o',markevery=lensell,markerfacecolor='red')
plt.show

#Calculate the profit
totalbuy=0
totalsell=0
ytmp = np.array(ytmp)
for i in buy:
  totalbuy = totalbuy+ytmp[i]
totalbuy = int(totalbuy)  
for i in sell:
  totalsell = totalsell+ytmp[i]
totalsell  = int(totalsell)
profit = totalsell-totalbuy
print("Total buy : ", totalbuy,"$")
print("Total sell :",totalsell,"$")
print("Profit is :" ,profit,"$")

